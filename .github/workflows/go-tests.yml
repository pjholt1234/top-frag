name: Go Tests

on:
  push:
    branches: [ main, master ]
    paths:
      - 'parser-service/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'parser-service/**'

jobs:
  go-tests:
    runs-on: ubuntu-latest
    name: Go Tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: cd parser-service && go mod download

    - name: Run tests with verbose output
      run: cd parser-service && go test -v -cover

    - name: Run tests with coverage report
      run: cd parser-service && go test -coverprofile=coverage.out

    - name: Display coverage summary
      run: cd parser-service && go tool cover -func=coverage.out

    - name: Generate HTML coverage report
      run: cd parser-service && go tool cover -html=coverage.out -o coverage.html

    - name: Check coverage threshold
      run: |
        cd parser-service
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "Coverage is below 70% threshold"
          exit 1
        fi
        echo "Coverage threshold met: $COVERAGE%"

    - name: Generate coverage badge
      run: |
        cd parser-service
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        echo "::set-output name=coverage::$COVERAGE"

    - name: Upload Go coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go-coverage
        path: |
          ./parser-service/coverage.out
          ./parser-service/coverage.html
        retention-days: 30

    - name: Comment on PR with coverage results (if PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const coveragePath = path.join(process.cwd(), 'parser-service', 'coverage.out');
            if (fs.existsSync(coveragePath)) {
              // Parse coverage output to get total coverage
              const { execSync } = require('child_process');
              const coverageOutput = execSync('cd parser-service && go tool cover -func=coverage.out', { encoding: 'utf8' });
              const totalLine = coverageOutput.split('\n').find(line => line.includes('total:'));
              
              if (totalLine) {
                const coverage = totalLine.match(/(\d+\.\d+)%/)[1];
                
                let comment = '## ðŸ“Š Go Test Coverage Results\n\n';
                comment += `**Total Coverage: ${coverage}%**\n\n`;
                
                // Add coverage details by package
                const packageLines = coverageOutput.split('\n').filter(line => 
                  line.includes('%') && !line.includes('total:') && line.trim()
                );
                
                if (packageLines.length > 0) {
                  comment += '### Package Coverage:\n\n';
                  packageLines.forEach(line => {
                    const parts = line.trim().split('\t');
                    if (parts.length >= 3) {
                      const package = parts[0];
                      const coverage = parts[2];
                      comment += `- **${package}**: ${coverage}\n`;
                    }
                  });
                  comment += '\n';
                }
                
                comment += 'ðŸ“ˆ Full coverage reports are available as workflow artifacts.';
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }
          } catch (error) {
            console.log('Could not generate coverage comment:', error.message);
          } 