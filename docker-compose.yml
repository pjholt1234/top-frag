version: '3.8'

services:
  # Using existing MySQL on host system

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: top-frag-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - top-frag-network

  # Laravel Web Application
  web-app:
    build:
      context: ./web-app
      dockerfile: Dockerfile.dev
    container_name: top-frag-web-app
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "5173:5173"
    volumes:
      - ./web-app:/var/www/html
      - web_app_vendor:/var/www/html/vendor
      - web_app_node_modules:/var/www/html/node_modules
    env_file:
      - ./web-app/.env
    depends_on:
      - redis
    networks:
      - top-frag-network
    command: >
      sh -c "
        composer install --no-interaction --prefer-dist --optimize-autoloader &&
        php artisan key:generate --force &&
        npm install &&
        npm run dev &
        php artisan serve --host=0.0.0.0 --port=8000
      "

  # Go Parser Service - Running natively (not in Docker)

  # Laravel Queue Workers
  queue-high:
    build:
      context: ./web-app
      dockerfile: Dockerfile.dev
    container_name: top-frag-queue-high
    restart: unless-stopped
    volumes:
      - ./web-app:/var/www/html
      - web_app_vendor:/var/www/html/vendor
    env_file:
      - ./web-app/.env
    depends_on:
      - redis
    networks:
      - top-frag-network
    command: >
      sh -c "
        composer install --no-interaction --prefer-dist --optimize-autoloader &&
        php artisan queue:work database --queue=high --tries=3 --timeout=300 --memory=512
      "

  queue-normal:
    build:
      context: ./web-app
      dockerfile: Dockerfile.dev
    container_name: top-frag-queue-normal
    restart: unless-stopped
    volumes:
      - ./web-app:/var/www/html
      - web_app_vendor:/var/www/html/vendor
    env_file:
      - ./web-app/.env
    depends_on:
      - redis
    networks:
      - top-frag-network
    command: >
      sh -c "
        composer install --no-interaction --prefer-dist --optimize-autoloader &&
        php artisan queue:work database --queue=normal,steam-processing --tries=3 --timeout=300 --memory=512
      "

  queue-low:
    build:
      context: ./web-app
      dockerfile: Dockerfile.dev
    container_name: top-frag-queue-low
    restart: unless-stopped
    volumes:
      - ./web-app:/var/www/html
      - web_app_vendor:/var/www/html/vendor
    env_file:
      - ./web-app/.env
    depends_on:
      - redis
    networks:
      - top-frag-network
    command: >
      sh -c "
        composer install --no-interaction --prefer-dist --optimize-autoloader &&
        php artisan queue:work database --queue=demo-download,low,default --tries=3 --timeout=300 --memory=512
      "

  # Node.js Valve Demo URL Service
  valve-demo-url-service:
    build:
      context: ./valve-demo-url-service
      dockerfile: Dockerfile.dev
    container_name: top-frag-valve-demo-url-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./valve-demo-url-service:/app
      - valve_demo_url_service_node_modules:/app/node_modules
    env_file:
      - ./valve-demo-url-service/.env
    networks:
      - top-frag-network
    command: >
      sh -c "
        npm install &&
        npm run dev:watch
      "

volumes:
  redis_data:
    driver: local
  web_app_vendor:
    driver: local
  web_app_node_modules:
    driver: local
  valve_demo_url_service_node_modules:
    driver: local

networks:
  top-frag-network:
    driver: bridge
